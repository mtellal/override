
# level06

## General Informations 

**Path** : `/home/users/level06/level06` </br>
**File** : 
```
level06: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x459bcb819bfdde7ecfa5612c8445e7dd0831cc48, not stripped
```
**Permissions**: `-rwsr-s---+ 1 level07 users 7907 Sep 10  2016 level06`  </br>
**Protections**:
```
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   level06
```

## Static Analysis

After decompiling the binary in ghidra, we get the pseudo code below: 

```
undefined4 auth(char *buffer,uint serial)
{
  size_t sVar1;
  undefined4 uVar2;
  long lVar3;
  int index;
  uint i;
  
  sVar1 = strcspn(buffer,"\n");
  buffer[sVar1] = '\0';
  sVar1 = strnlen(buffer,0x20);
  if ((int)sVar1 < 6) {
    uVar2 = 1;
  }
  else {
    lVar3 = ptrace(PTRACE_TRACEME);
    if (lVar3 == -1) {
      puts("\x1b[32m.---------------------------.");
      puts("\x1b[31m| !! TAMPERING DETECTED !!  |");
      puts("\x1b[32m\'---------------------------\'");
      uVar2 = 1;
    }
    else {
      i = ((int)buffer[3] ^ 0x1337U) + 0x5eeded;
      for (index = 0; index < (int)sVar1; index = index + 1) {
        if (buffer[index] < ' ') {
          return 1;
        }
        i = i + ((int)buffer[index] ^ i) % 0x539;
      }
      if (serial == i) {
        uVar2 = 0;
      }
      else {
        uVar2 = 1;
      }
    }
  }
  return uVar2;
}

bool main(void)
{
  int iVar1;
  int in_GS_OFFSET;
  char buffer [32];
  int i;
  
  i = *(int *)(in_GS_OFFSET + 0x14);
  puts("***********************************");
  puts("*\t\tlevel06\t\t  *");
  puts("***********************************");
  printf("-> Enter Login: ");
  fgets(buffer,0x20,stdin);
  puts("***********************************");
  puts("***** NEW ACCOUNT DETECTED ********");
  puts("***********************************");
  printf("-> Enter Serial: ");
  __isoc99_scanf();
  iVar1 = auth();
  if (iVar1 == 0) {
    puts("Authenticated!");
    system("/bin/sh");
  }
  if (i != *(int *)(in_GS_OFFSET + 0x14)) {
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  }
  return iVar1 != 0;
}
```

- `main`
  - Stores the `login` input in a 32 bytes buffer.
  - Prompts the user for a serial (unsigned int) using `scanf`.
  - Calls the `auth` function. If it returns 0, a shell is spawned.

- `auth`
  - Immediately exits if the program is being run in GDB (protected using `ptrace`).
  - Converts the `login` input into an unsigned int and checks whether it matches the serial provided earlier.

## Vulnerability found  


## Dynamic Analysis

We set a breakpoint inside the `auth` function, right before the GDB detection and the comparison condition:
```
(gdb) b *0x080487ba
```

Then, we add a second breakpoint at the instruction where the computed serial is compared to the one entered:
```
(gdb) b *0x08048866
```

Running the binary with `mtellal` as login and a random serial triggers the first breakpoint. </br>
By modifying `eax`, we bypass the check and reach the second breakpoint.
```
(gdb) r
...
-> Enter Login: mtellal
-> Enter Serial: 9999

Breakpoint 1, 0x080487ba in auth ()
...
(gdb) i r
eax            0xffffffff	-1
(gdb) set $eax=0
(gdb) c
Continuing.

Breakpoint 2, 0x08048866 in auth ()
```

The correct serial value is located at `$ebp - 0x10`
```
(gdb) x/u $ebp - 0x10
0xffffd5a8:	6233761
```

Using the login `mtellal` and the serial `6233761` successfully spawns a shell.


## Payload construction 


## Demonstration 

```
level06@OverRide:~$ ./level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: mtellal
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6233761
Authenticated!
$ whoami
level07
```

## Flag 
```
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8
```